# ------------------------------------------------------
# üß† SPACE COMPLEXITY EXPLAINED (with examples)
# ------------------------------------------------------

# Space complexity measures the amount of memory (RAM) an algorithm uses
# as the size of input increases.
# It's just as important as time complexity, especially when memory is limited.

# ==========================================================
# üß™ EXAMPLE 1: Recursive Function ‚ûù Space Complexity: O(n)
# ==========================================================

def recursive_sum(n):
    if n <= 0:
        return 0
    return n + recursive_sum(n - 1)

# ‚ñ∂Ô∏è Call the function with input 3
print(recursive_sum(3))

# ------------------------------------------------------
# üß† Explanation - Step by Step (with Stack Visualization)
# ------------------------------------------------------
# Each recursive call waits for the next one to return,
# so all of them stay in memory until the base case is reached.
# This builds up a call stack of depth n.

# Let's visualize the stack growth:
#
#     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
#     ‚îÇ recursive_sum(3) ‚îÇ
#     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
#     ‚îÇ recursive_sum(2) ‚îÇ
#     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
#     ‚îÇ recursive_sum(1) ‚îÇ
#     ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
#     ‚îÇ recursive_sum(0) ‚îÇ ‚Üí returns 0
#     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
#
# Then, the stack unwinds as follows:
# recursive_sum(1) ‚ûù 1 + 0 = 1
# recursive_sum(2) ‚ûù 2 + 1 = 3
# recursive_sum(3) ‚ûù 3 + 3 = 6
#
# ‚úÖ Space Complexity = O(n) (n stack frames held in memory)

# ==============================================================
# üß™ EXAMPLE 2: Function with Loop & Helper Call ‚ûù O(1) Space
# ==============================================================

def pair_sum_sequence(n):
    total = 0
    for i in range(n):
        total = total + pair_sum(i, i + 1)
    return total

def pair_sum(a, b):
    return a + b

# ‚ñ∂Ô∏è Call the function with input 4
print(pair_sum_sequence(4))

# ------------------------------------------------------
# üß† Explanation - Step by Step
# ------------------------------------------------------
# pair_sum_sequence(4) runs a loop from i = 0 to 3 (4 iterations)
# On each iteration, it calls the helper function `pair_sum` which executes and returns immediately.
# So at no point are multiple function calls waiting in memory.

# üåÄ Iteration-wise Breakdown:
# i = 0 ‚Üí total = 0 + pair_sum(0,1) ‚Üí total = 1
# i = 1 ‚Üí total = 1 + pair_sum(1,2) ‚Üí total = 4
# i = 2 ‚Üí total = 4 + pair_sum(2,3) ‚Üí total = 9
# i = 3 ‚Üí total = 9 + pair_sum(3,4) ‚Üí total = 16

# ‚úÖ Space Complexity = O(1)
# Because no matter how big n gets, we only store:
# ‚û§ 'total' variable
# ‚û§ 'i' loop index
# ‚û§ 'a' and 'b' inside the helper function ‚Äî one at a time

# So only a constant amount of memory is used!

# ------------------------------------------------------
# üìå CONCLUSION:
# ------------------------------------------------------
# 1Ô∏è‚É£ Recursive calls ‚ûù O(n) space (due to call stack)
# 2Ô∏è‚É£ Iterative calls with immediate return ‚ûù O(1) space
#
# Remember:
# ‚û§ Time complexity measures operations
# ‚û§ Space complexity measures memory usage
#
# ‚úÖ GOOD BYE EVERYONE !
