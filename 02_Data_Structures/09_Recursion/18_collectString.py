# ------------------------------------------------------------
# üìò note.py ‚Äî Recursion: collectStrings (Nested Object Traversal)
# ------------------------------------------------------------
"""
Purpose:
 - Learn how to use recursion to traverse deeply nested dictionaries.
 - Collect all string values from an object regardless of nesting depth.
 - Strengthen understanding of recursion on tree-like JSON data.

Problem Definition:
 Write a recursive function `collectStrings(obj)` that accepts a dictionary
 and returns a list of all values that are strings.

Example:
 Input  ‚Üí
  {
    "stuff": 'foo',
    "data": {
      "val": {
        "thing": {
          "info": 'bar',
          "moreInfo": {
            "evenMoreInfo": {
              "weMadeIt": 'baz'
            }
          }
        }
      }
    }
  }

 Output ‚Üí
  ['foo', 'bar', 'baz']
"""

# ============================================================
# üîÅ 1. Step-by-step recursion logic
# ============================================================
"""
We follow the standard 3-step recursion framework:

Step 1Ô∏è‚É£ ‚Äî Recursive Case:
  - Loop through each key in the dictionary.
  - If the value is a dictionary ‚Üí recurse deeper.
  - If the value is a string ‚Üí collect it.
  - Otherwise ‚Üí ignore it.

Step 2Ô∏è‚É£ ‚Äî Base Case:
  - Stop when there are no more nested dictionaries (no deeper recursion possible).

Step 3Ô∏è‚É£ ‚Äî Unintentional Cases:
  - Input must be a dictionary.
  - Skip non-dictionary types such as lists, integers, booleans, etc.
"""

# ============================================================
# ‚úÖ 2. Final Recursive Code
# ============================================================

def collectStrings(obj):
    assert isinstance(obj, dict), "Input must be a dictionary"
    result = []
    for key in obj:
        value = obj[key]
        # If value is string ‚Üí collect it
        if isinstance(value, str):
            result.append(value)
        # If value is dictionary ‚Üí recurse into it
        elif isinstance(value, dict):
            result += collectStrings(value)
    return result


# ============================================================
# üß™ 3. Example Runs
# ============================================================
if __name__ == "__main__":
    obj = {
        "stuff": 'foo',
        "data": {
            "val": {
                "thing": {
                    "info": 'bar',
                    "moreInfo": {
                        "evenMoreInfo": {
                            "weMadeIt": 'baz'
                        }
                    }
                }
            }
        }
    }

    print("‚úÖ Recursive Example: collectStrings()\n")
    print("Input Object:")
    print(obj)
    print("\nCollected Strings:")
    print(collectStrings(obj))
    # Expected Output ‚Üí ['foo', 'bar', 'baz']


# ============================================================
# üß≠ 4. How recursion works (Example)
# ============================================================
"""
Input:
{
  "stuff": 'foo',
  "data": {
    "val": {
      "thing": {
        "info": 'bar',
        "moreInfo": {
          "evenMoreInfo": {
            "weMadeIt": 'baz'
          }
        }
      }
    }
  }
}

Recursive Flow:
1Ô∏è‚É£ collectStrings(obj)
    ‚Üí stuff = 'foo' ‚Üí add ['foo']
    ‚Üí data = {...} ‚Üí recurse

2Ô∏è‚É£ collectStrings(obj['data'])
    ‚Üí val = {...} ‚Üí recurse

3Ô∏è‚É£ collectStrings(obj['data']['val'])
    ‚Üí thing = {...} ‚Üí recurse

4Ô∏è‚É£ collectStrings(obj['data']['val']['thing'])
    ‚Üí info = 'bar' ‚Üí add ['bar']
    ‚Üí moreInfo = {...} ‚Üí recurse

5Ô∏è‚É£ collectStrings(obj['data']['val']['thing']['moreInfo'])
    ‚Üí evenMoreInfo = {...} ‚Üí recurse

6Ô∏è‚É£ collectStrings(obj['data']['val']['thing']['moreInfo']['evenMoreInfo'])
    ‚Üí weMadeIt = 'baz' ‚Üí add ['baz']

Return Flow:
 ‚Üí combine ['foo'] + ['bar'] + ['baz'] ‚Üí ‚úÖ ['foo', 'bar', 'baz']
"""

# ============================================================
# üé® 5. Visualization (Call Stack)
# ============================================================
"""
collectStrings(obj)
  ‚Üì
collectStrings(obj['data'])
  ‚Üì
collectStrings(obj['data']['val'])
  ‚Üì
collectStrings(obj['data']['val']['thing'])
  ‚Üì
collectStrings(obj['data']['val']['thing']['moreInfo'])
  ‚Üì
collectStrings(obj['data']['val']['thing']['moreInfo']['evenMoreInfo'])
  ‚Üì
returns ['baz']
  ‚Üì
returns ['bar', 'baz']
  ‚Üì
returns ['foo', 'bar', 'baz']
"""

# ============================================================
# ‚öôÔ∏è 6. Optional Safe Version (with Validation)
# ============================================================
def safe_collectStrings(obj):
    """Safer version with input type validation."""
    assert isinstance(obj, dict), "Input must be a dictionary."
    result = []
    for key, value in obj.items():
        if isinstance(value, str):
            result.append(value)
        elif isinstance(value, dict):
            result += safe_collectStrings(value)
    return result


# ============================================================
# üìà 7. Complexity Analysis
# ============================================================
"""
Let n = total number of keys across all nested dictionaries.

‚è± Time Complexity: O(n)
 - Each key/value pair is visited once.

üßÆ Space Complexity: O(d)
 - d = depth of recursion (maximum nesting level).
 - Plus O(k) for storing the result list of strings.
"""

# ============================================================
# ‚ö†Ô∏è 8. Common Mistakes & Fixes
# ============================================================
"""
‚ùå Returning inside the for loop
   ‚Üí causes premature return after first key.
‚úÖ Always return after the loop finishes.

‚ùå Forgetting to merge recursive results
   ‚Üí only last branch is collected.
‚úÖ Use '+=' or 'extend()' to merge lists.

‚ùå Mutating input
   ‚Üí recursion should not modify original dictionary.
‚úÖ Always collect into a new list.
"""

# ============================================================
# üß© 9. Practice Exercises
# ============================================================
"""
1Ô∏è‚É£ Modify function to collect only values starting with a specific letter.
2Ô∏è‚É£ Write `collectNumbers()` that returns all numeric values instead of strings.
3Ô∏è‚É£ Combine this logic with `nestedEvenSum()` to collect both even and string values.
4Ô∏è‚É£ Modify to return both keys and string values as tuples.
"""

# ============================================================
# ‚ùì 10. Mini Quiz (answers below)
# ============================================================
"""
Q1: What happens if a key‚Äôs value is a list?
Q2: Why is the assert statement useful?
Q3: What is the time complexity?
Q4: What is the base case here?

‚úÖ Answers:
A1: Lists are ignored (only dicts and strings are processed).
A2: Ensures input is valid (dictionary only).
A3: O(n)
A4: When no nested dictionaries remain.
"""

# ============================================================
# ‚úÖ End of note.py ‚Äî collectStrings (Recursion)
# ============================================================
"""
Summary:
 - Traverses nested dictionaries recursively.
 - Collects and returns all string values.
 - Base Case ‚Üí no nested dicts left.
 - Recursive Case ‚Üí call function on sub-dictionaries.
 - Time: O(n), Space: O(d)
"""
