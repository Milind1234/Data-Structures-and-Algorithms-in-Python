# note.py
# ------------------------------------------------------
# üìò Queue (Linked List Implementation)
# ‚úÖ Topic: Implementation, Working & Time/Space Complexity
# ------------------------------------------------------

"""
üìå INTRODUCTION

This file implements a **Queue** using a **Singly Linked List** in Python.

Unlike list-based queues or circular queues:
    ‚úÖ There is no fixed capacity.
    ‚úÖ The queue grows dynamically as nodes are added.
    ‚úÖ Each enqueue and dequeue operation runs in constant time.
    ‚ùå Slightly higher memory overhead (due to Node objects and pointers).

Structure:
    - Each node stores `value` and a pointer `next`.
    - The Queue maintains:
        üîπ head ‚Üí front of queue (for dequeue)
        üîπ tail ‚Üí end of queue (for enqueue)
"""

# ---------------------------------------------------------------
# üß± STRUCTURE OVERVIEW
# ---------------------------------------------------------------
"""
Each Node:
    [value | next] ‚Üí pointer to next node

The Queue maintains:
   head ‚Üí first node (front of queue)
   tail ‚Üí last node  (rear of queue)

Initially:
   head ‚Üí None
   tail ‚Üí None
   (Queue is empty)

Visual:
   +------+      +------+
   | Head | -->  | None |
   +------+      +------+
   | Tail | -->  | None |
   +------+      +------+
"""

# ---------------------------------------------------------------
# üß© CLASS DEFINITIONS
# ---------------------------------------------------------------
class Node:
    """
    Represents a single node in the linked list.
    Stores the data (value) and reference to the next node.
    """
    def __init__(self, value=None):
        self.value = value
        self.next = None

    def __str__(self):
        return str(self.value)


class LinkedList:
    """
    Singly Linked List used internally by the Queue.
    """
    def __init__(self):
        self.head = None
        self.tail = None

    def __iter__(self):
        """
        Generator to iterate through the list nodes.
        Enables easy printing of queue contents.
        """
        current_node = self.head
        while current_node:
            yield current_node
            current_node = current_node.next


# ---------------------------------------------------------------
# üß± QUEUE USING LINKED LIST
# ---------------------------------------------------------------
class Queue:
    def __init__(self):
        """
        Initialize an empty queue using a LinkedList.
        ‚è±Ô∏è O(1) | üíæ O(1)
        """
        self.linkedlist = LinkedList()

    def __str__(self):
        """
        Return queue elements visually as '1 --> 2 --> 3'
        """
        values = [str(x) for x in self.linkedlist]
        return " --> ".join(values) if values else "Empty Queue"

    # -----------------------------------------------------------
    # 1Ô∏è‚É£ isEmpty()
    # -----------------------------------------------------------
    def isEmpty(self):
        """
        Check if queue has any elements.

        ‚è±Ô∏è O(1) | üíæ O(1)
        """
        return self.linkedlist.head is None

    # -----------------------------------------------------------
    # 2Ô∏è‚É£ enqueue(value)
    # -----------------------------------------------------------
    def enqueue(self, value):
        """
        Insert element at the end (tail) of the queue.

        Steps:
          1. Create a new node with given value.
          2. If queue empty ‚Üí set head and tail to new node.
          3. Else ‚Üí attach new node to current tail and update tail pointer.

        VISUAL:
            Before enqueue(1):
                head ‚Üí None, tail ‚Üí None
            After enqueue(1):
                head ‚Üí [1] (tail also points here)
            After enqueue(2):
                [1] --> [2]
            After enqueue(3):
                [1] --> [2] --> [3]
                
        VISUALIZATION:

        Step 1Ô∏è‚É£ ‚Äî Enqueue(1)
        +------+     +----------+
        |Head  | --> |[1|‚Ä¢]     |
        +------+     +----------+
        |Tail  | ----^

        Step 2Ô∏è‚É£ ‚Äî Enqueue(2)
        +------+     +----------+     +----------+
        |Head  | --> |[1|‚Ä¢]---->|[2|/]|
        +------+     +----------+     +----------+
        |Tail  | ----------------------^

        Step 3Ô∏è‚É£ ‚Äî Enqueue(3)
        +------+     +----------+     +----------+     +----------+
        |Head  | --> |[1|‚Ä¢]---->|[2|‚Ä¢]---->|[3|/]|
        +------+     +----------+     +----------+     +----------+
        |Tail  | ----------------------------------------------^

        ‚è±Ô∏è O(1) | üíæ O(1)
        """
        new_node = Node(value)
        if self.linkedlist.head is None:
            self.linkedlist.head = new_node
            self.linkedlist.tail = new_node
        else:
            self.linkedlist.tail.next = new_node
            self.linkedlist.tail = new_node
        return f"Enqueued {new_node}"

    # -----------------------------------------------------------
    # 3Ô∏è‚É£ dequeue()
    # -----------------------------------------------------------
    def dequeue(self):
        """
        Remove and return the element at the front of the queue.

        Steps:
          1. Check if queue is empty.
          2. Store the head node temporarily.
          3. Move head ‚Üí head.next
          4. If head becomes None ‚Üí reset tail to None (queue empty)
          5. Return dequeued node.

        VISUAL:
            Before dequeue():
                [1] --> [2] --> [3]
                head = [1]
            After dequeue():
                [2] --> [3]
                head = [2]
                
        VISUALIZATION:

        Before Dequeue:
        +------+     +----------+     +----------+     +----------+
        |Head  | --> |[1|‚Ä¢]---->|[2|‚Ä¢]---->|[3|/]|
        +------+     +----------+     +----------+     +----------+
        |Tail  | ----------------------------------------------^

        Step: Remove Head (1)
        +------+     +----------+     +----------+
        |Head  | --> |[2|‚Ä¢]---->|[3|/]|
        +------+     +----------+     +----------+
        |Tail  | ----------------------^

        (Node [1|‚Ä¢] is garbage collected)


        ‚è±Ô∏è O(1) | üíæ O(1)
        """
        if self.isEmpty():
            return "Empty Queue"
        else:
            popped_node = self.linkedlist.head
            if self.linkedlist.head == self.linkedlist.tail:
                self.linkedlist.head = None
                self.linkedlist.tail = None
            else:
                self.linkedlist.head = self.linkedlist.head.next
            return f"Dequeued {popped_node}"

    # -----------------------------------------------------------
    # 4Ô∏è‚É£ peek()
    # -----------------------------------------------------------
    def peek(self):
        """
        Return the first element in the queue without removing it.

        VISUAL:
            Queue: [1] --> [2] --> [3]
            peek() ‚Üí returns 1 (head node value)
        
        VISUALIZATION:
        +------+     +----------+     +----------+     +----------+
        |Head  | --> |[1|‚Ä¢]---->|[2|‚Ä¢]---->|[3|/]|
        +------+     +----------+     +----------+     +----------+
        |Tail  | ----------------------------------------------^

        peek() ‚Üí returns '1' (value at head)
        
        ‚è±Ô∏è O(1) | üíæ O(1)
        """
        if self.isEmpty():
            return "Empty Queue"
        else:
            return f"Element at start of Queue: {self.linkedlist.head.value}"

    # -----------------------------------------------------------
    # 5Ô∏è‚É£ delete()
    # -----------------------------------------------------------
    def delete(self):
        """
        Delete all elements from the queue.

        Steps:
          - Set head = None
          - Set tail = None
        Makes all nodes eligible for garbage collection.

        VISUAL:
            Before delete:
                [1] --> [2] --> [3]
            After delete:
                head = None
                tail = None
            
         VISUALIZATION:
        Before delete:
        +------+     +----------+     +----------+     +----------+
        |Head  | --> |[1|‚Ä¢]---->|[2|‚Ä¢]---->|[3|/]|
        +------+     +----------+     +----------+     +----------+
        |Tail  | ----------------------------------------------^

        After delete:
        +------+     +------+
        |Head  | --> | None |
        +------+     +------+
        |Tail  | --> | None |
        +------+     +------+

        ‚è±Ô∏è O(1) | üíæ O(1)
        """
        if self.isEmpty():
            return "Empty Queue"
        else:
            self.linkedlist.head = None
            self.linkedlist.tail = None
        return "All Elements in Queue are deleted"


# ---------------------------------------------------------------
# ‚ñ∂Ô∏è DEMONSTRATION (Dry Run Example)
# ---------------------------------------------------------------
if __name__ == "__main__":
    new_Queue = Queue()

    print(new_Queue.enqueue(1))
    print(new_Queue.enqueue(2))
    print(new_Queue.enqueue(3))
    print(new_Queue.enqueue(4))
    print(new_Queue.enqueue(5))

    print("\nCurrent Queue:")
    print(new_Queue)

    print("\nDequeuing first element:")
    print(new_Queue.dequeue())
    print("Queue after dequeue:", new_Queue)

    print("\nPeeking front element:")
    print(new_Queue.peek())

    print("\nDeleting all elements:")
    print(new_Queue.delete())
    print("Queue after delete:", new_Queue)


# ---------------------------------------------------------------
# üìä SUMMARY OF TIME & SPACE COMPLEXITY
# ---------------------------------------------------------------
"""
Operation        | Time Complexity | Space Complexity | Description
-------------------------------------------------------------------
Create Queue     | O(1)            | O(1)             | Initialize empty linked list
Enqueue          | O(1)            | O(1)             | Add node at tail
Dequeue          | O(1)            | O(1)             | Remove node at head
Peek             | O(1)            | O(1)             | Access head node
isEmpty          | O(1)            | O(1)             | Check head == None
Delete Queue     | O(1)            | O(1)             | Reset head and tail
isFull           | ‚ùå N/A           | -                | Linked list has no fixed capacity

‚úÖ Key Benefits:
- No shifting or resizing needed (unlike list-based queues).
- Dynamically grows in memory.
- Best choice when queue size is unpredictable.

üß© Visual Recap:
Initial:   Empty
enqueue(1): [1]
enqueue(2): [1] --> [2]
enqueue(3): [1] --> [2] --> [3]
dequeue():  [2] --> [3]
peek():     returns 2
delete():   Queue cleared (head, tail = None)
"""
