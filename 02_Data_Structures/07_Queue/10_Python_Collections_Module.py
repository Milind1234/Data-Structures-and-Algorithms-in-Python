# note.py
# ------------------------------------------------------
# üìò Queue Using Collections Module (deque)
# ‚úÖ Topic: Implementation, Working, and Time/Space Complexity
# ------------------------------------------------------

"""
üìå INTRODUCTION

In previous Notes, we implemented queues using:
   - Python List (no capacity)
   - Python List (Circular Queue with fixed capacity)
   - Linked List

Now in this note, we will learn how to create a Queue using Python‚Äôs
**collections module** ‚Äî specifically, the **deque class**.

In Python, we can create a queue using three modules:
   1Ô∏è‚É£ `collections`  ‚Üí deque class
   2Ô∏è‚É£ `queue`         ‚Üí for multithreading (thread-safe)
   3Ô∏è‚É£ `multiprocessing` ‚Üí for inter-process communication

Here, we focus on `collections.deque` because:
   üîπ It‚Äôs simple
   üîπ Very fast (O(1) for enqueue & dequeue)
   üîπ Built into the standard library
"""

# ---------------------------------------------------------------
# üß† WHAT IS deque?
# ---------------------------------------------------------------
"""
‚úÖ The `deque` (pronounced ‚Äúdeck‚Äù) stands for **Double-Ended Queue**.
   It allows insertion and deletion from **both ends** ‚Äî left and right ‚Äî in O(1) time.

‚úÖ Internally implemented as a **Doubly Linked List**:
   - Each element has links to both previous and next nodes.
   - This structure avoids shifting and resizing overhead.

‚úÖ Because it supports fast append and pop operations on both ends,
   it can be used as:
      ‚Üí Queue (FIFO)
      ‚Üí Stack (LIFO)

üìó In this note, we use `deque` for a **FIFO Queue** (First In, First Out).
"""

# ---------------------------------------------------------------
# üß© deque METHODS FOR QUEUE OPERATIONS
# ---------------------------------------------------------------
"""
1Ô∏è‚É£ deque(maxlen = N)
   ‚Üí Creates a deque object (queue)
   ‚Üí Optional maxlen sets capacity (like circular queue)
   ‚Üí If maxlen = None ‚Üí queue can grow infinitely (unbounded queue)

2Ô∏è‚É£ append(value)
   ‚Üí Adds an element to the **right end** (like enqueue)
   ‚Üí Equivalent to adding to the rear in a normal queue.

3Ô∏è‚É£ popleft()
   ‚Üí Removes and returns an element from the **left end** (like dequeue)
   ‚Üí Equivalent to removing from the front of a queue.

4Ô∏è‚É£ clear()
   ‚Üí Removes all elements from the queue.

5Ô∏è‚É£ maxlen
   ‚Üí Property that shows the maximum size of the queue.
   ‚Üí If full, adding a new item discards an element from the opposite end automatically.
"""

# ---------------------------------------------------------------
# ‚öôÔ∏è IMPLEMENTATION EXAMPLE
# ---------------------------------------------------------------
from collections import deque

# Create a queue with capacity 3
new_Queue = deque(maxlen=3)
print("Initial Queue:", new_Queue)

# Enqueue operations (append)
new_Queue.append(1)
new_Queue.append(2)
new_Queue.append(3)
print("Queue after enqueue:", new_Queue)

# Try to enqueue when queue is full
new_Queue.append(4)
print("Queue after enqueue(4):", new_Queue)

# Dequeue (popleft)
print("Dequeued element:", new_Queue.popleft())
print("Queue after dequeue:", new_Queue)

# Clear the queue
new_Queue.clear()
print("Queue after clear:", new_Queue)

# ---------------------------------------------------------------
# üß† STEP-BY-STEP EXPLANATION (With Visualization)
# ---------------------------------------------------------------
"""
üß© Step 1Ô∏è‚É£: Create Queue
   new_Queue = deque(maxlen=3)
   ‚Üí []

   Queue created successfully but empty.

üß© Step 2Ô∏è‚É£: Enqueue 3 elements (1, 2, 3)
   new_Queue.append(1)
   new_Queue.append(2)
   new_Queue.append(3)
   ‚Üí [1, 2, 3]
   ‚úÖ Adds elements at the right end in FIFO order.

üß© Step 3Ô∏è‚É£: Enqueue one more element (4)
   Since maxlen = 3 ‚Üí queue is full.
   üîÅ Behavior:
       - The oldest element (leftmost, 1) is automatically removed.
       - New element (4) is added to the right.
   üß† Result: [2, 3, 4]
   ‚ö†Ô∏è Unlike circular queue, deque does NOT raise an error.
       It silently discards from the opposite end!

üß© Step 4Ô∏è‚É£: Dequeue element using popleft()
   ‚Üí Removes and returns leftmost element (2)
   Queue becomes [3, 4]
   Returned: 2

üß© Step 5Ô∏è‚É£: Clear entire queue
   ‚Üí new_Queue.clear()
   Queue becomes []
   ‚úÖ Deletes all elements.
"""

# ---------------------------------------------------------------
# üßæ KEY BEHAVIOR (VERY IMPORTANT)
# ---------------------------------------------------------------
"""
üî∏ If `maxlen` is set and queue is full:
      Adding a new element automatically discards the oldest one.
      (It behaves like a circular buffer)
      Example:
         deque([1, 2, 3], maxlen=3)
         append(4) ‚Üí deque([2, 3, 4])

üî∏ If `maxlen` is not set (None):
      Queue grows indefinitely (like normal linked queue).

üî∏ append() ‚Üî enqueue
üî∏ popleft() ‚Üî dequeue
üî∏ clear() ‚Üî delete
üî∏ len(queue) == 0 ‚Üî isEmpty
üî∏ len(queue) == maxlen ‚Üî isFull (manual check)
"""

# ---------------------------------------------------------------
# üìä TIME & SPACE COMPLEXITY
# ---------------------------------------------------------------
"""
Operation       | Time Complexity | Space Complexity | Description
-----------------------------------------------------------------
Create Queue    | O(1)            | O(n)             | Initialize deque (fixed or dynamic)
Enqueue (append)| O(1)            | O(1)             | Add element at rear
Dequeue (popleft)| O(1)           | O(1)             | Remove element from front
Peek            | O(1)            | O(1)             | Access front element (queue[0])
isEmpty         | O(1)            | O(1)             | len(queue) == 0
Delete Queue    | O(1)            | O(1)             | clear() all elements
"""

# ---------------------------------------------------------------
# üß© VISUAL UNDERSTANDING
# ---------------------------------------------------------------
"""
Initial:
   [  ]                (Empty Queue)

After enqueue(1), enqueue(2), enqueue(3):
   [1, 2, 3]           (Full queue)

After enqueue(4) with maxlen=3:
   [2, 3, 4]           (1 discarded ‚ùå)

After dequeue():
   [3, 4]              (Front removed ‚úÖ)

After clear():
   [  ]                (All cleared)
"""

# ---------------------------------------------------------------
# ‚öñÔ∏è COMPARISON WITH OTHER QUEUES
# ---------------------------------------------------------------
"""
Queue Type               | Capacity  | Overflow Behavior           | Implementation       | Performance
---------------------------------------------------------------------------------------------------------
List (No Capacity)       | Unlimited | Grows dynamically           | Python list          | enqueue O(1)*, dequeue O(n)
Circular Queue (List)    | Fixed     | Raises ‚ÄúQueue Full‚Äù         | Python list (modulo) | enqueue/dequeue O(1)
Linked List Queue        | Unlimited | Dynamic growth              | Linked List          | enqueue/dequeue O(1)
Deque (collections)      | Fixed/‚àû   | Discards oldest element ‚ö†Ô∏è  | Doubly Linked List   | enqueue/dequeue O(1)
"""

# ---------------------------------------------------------------
# üí° SUMMARY AND TAKEAWAYS
# ---------------------------------------------------------------
"""
‚úÖ `deque` is part of the **collections module** (no installation required).
‚úÖ Implements queue efficiently using doubly linked list.
‚úÖ append() ‚Üí enqueue, popleft() ‚Üí dequeue.
‚úÖ O(1) performance for all major operations.
‚úÖ Can be used as both Queue and Stack.
‚úÖ Great for real-world problems:
   - Task Scheduling
   - Data Stream Buffering
   - Caching (Fixed window)
   - Producer‚ÄìConsumer patterns

‚ö†Ô∏è Be careful:
   - When maxlen is set, **oldest elements get overwritten silently.**
   - No built-in ‚ÄúisFull‚Äù ‚Üí must manually check with len(queue) == queue.maxlen.

üß† Best Use Case:
   - When you need a **fast, built-in queue**.
   - When you want a **fixed-size buffer** (like in data streams).
   - When you want **simple FIFO behavior without custom classes**.
"""

# ---------------------------------------------------------------
# üìò REFERENCE SUMMARY (From note Slides)
# ---------------------------------------------------------------
"""
Fig. 1 ‚Äî Time & Space Complexity Summary (List vs Circular Queue vs Linked List vs Deque)

Operation        | List(NoCap) | CircularQueue | LinkedList | Deque
---------------------------------------------------------------------
Create Queue     | O(1)        | O(1)          | O(1)       | O(1)
Enqueue          | O(1)*avg    | O(1)          | O(1)       | O(1)
Dequeue          | O(n)        | O(1)          | O(1)       | O(1)
Peek             | O(1)        | O(1)          | O(1)       | O(1)
isEmpty          | O(1)        | O(1)          | O(1)       | O(1)
isFull           | ‚ùå N/A      | O(1)          | ‚ùå N/A     | Manual check
Delete Queue     | O(1)        | O(1)          | O(1)       | O(1)
Space Complexity | O(1)        | O(n)          | O(1)       | O(n)
---------------------------------------------------------------------
‚úÖ Deque (collections) provides the best built-in queue option in Python.
"""
