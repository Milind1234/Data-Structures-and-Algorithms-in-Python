# note.py
# ------------------------------------------------------
# üìò Stack - Notes File
# ‚úÖ Topic: Peek Method in Stack (Linked List Implementation)
# ------------------------------------------------------

"""
üìå OVERVIEW:
In a **Linked List‚Äìbased Stack**, the `peek()` method allows us to **see**
the top element of the stack *without removing it*.

Unlike `pop()`, which removes the top node,
`peek()` simply returns the top node (or its value).

---------------------------------------------------------
üîπ PURPOSE:
- Useful when we only need to check which element is currently at the top.
- Does not modify the stack.
"""

# ---------------------------------------------------------------
# üß© NODE CLASS
# ---------------------------------------------------------------
class Node:
    def __init__(self, value):
        """
        Each node stores:
        - value ‚Üí data
        - next ‚Üí pointer to next node
        """
        self.value = value
        self.next = None


# ---------------------------------------------------------------
# üß± STACK CLASS (with push & peek methods)
# ---------------------------------------------------------------
class Stack:
    def __init__(self):
        """
        Create an empty stack.
        - top ‚Üí None
        - length ‚Üí 0

        ‚è±Ô∏è Time Complexity: O(1)
        üíæ Space Complexity: O(1)
        """
        self.top = None
        self.length = 0

    # -----------------------------------------------------------
    # 1Ô∏è‚É£ PUSH METHOD
    # -----------------------------------------------------------
    def push(self, value):
        """
        Insert a new node at the top of the stack.
        ‚è±Ô∏è O(1) | üíæ O(1)
        """
        new_node = Node(value)
        new_node.next = self.top
        self.top = new_node
        self.length += 1

    # -----------------------------------------------------------
    # 2Ô∏è‚É£ __str__() ‚Üí Print Stack (Top ‚Üí Bottom)
    # -----------------------------------------------------------
    def __str__(self):
        if self.length == 0:
            return "Stack is Empty"
        values = []
        current_node = self.top
        while current_node:
            values.append(str(current_node.value))
            current_node = current_node.next
        return "\n".join(values)

    # -----------------------------------------------------------
    # 3Ô∏è‚É£ PEEK METHOD
    # -----------------------------------------------------------
    def peek(self):
        """
        Purpose:
        Return the top element of the stack *without removing it*.

        Steps:
        1Ô∏è‚É£ Check if stack is empty ‚Üí return "Stack is Empty".
        2Ô∏è‚É£ If not empty, return self.top.value.

        ‚è±Ô∏è Time Complexity: O(1)
        üíæ Space Complexity: O(1)
        """
        if self.top is None:
            return "Stack is Empty"
        return self.top.value


# ---------------------------------------------------------------
# ‚úÖ USAGE EXAMPLE & DRY RUN
# ---------------------------------------------------------------
if __name__ == "__main__":
    new_stack = Stack()

    # Push elements
    new_stack.push(10)   # Stack: [10]
    new_stack.push(20)   # Stack: [20 ‚Üí 10]
    new_stack.push(30)   # Stack: [30 ‚Üí 20 ‚Üí 10]

    print("Current Stack:")
    print(new_stack)

    # Peek top element
    print("\nValue at Top (using peek):", new_stack.peek())  # ‚Üí 30


# ---------------------------------------------------------------
# üìä VISUALIZATION (PEEK OPERATION)
# ---------------------------------------------------------------
# Stack (Top ‚Üí Bottom):
#   +----+
#   | 30 | ‚Üê top
#   +----+
#     ‚Üì
#   +----+
#   | 20 |
#   +----+
#     ‚Üì
#   +----+
#   | 10 |
#   +----+
#     ‚Üì
#   None
#
# peek() ‚Üí returns top value = 30
# Stack remains unchanged.
# ---------------------------------------------------------------


"""
üìò STACK (Linked List Implementation) ‚Äî PEEK METHOD SUMMARY

üîπ What It Does:
Returns the top element of the stack *without removing it*.

üîπ Steps:
1Ô∏è‚É£ Check if stack is empty.
2Ô∏è‚É£ Return top.value.

üîπ Behavior:
- Does not modify stack.
- Safe to call multiple times.

---------------------------------------------------------
üîπ Example:
Stack: [30 ‚Üí 20 ‚Üí 10]
peek() ‚Üí 30
Stack after peek() ‚Üí [30 ‚Üí 20 ‚Üí 10] (unchanged)

---------------------------------------------------------
üîπ Time & Space Complexity
Operation        Time Complexity     Space Complexity
----------------------------------------------------
Check Empty       O(1)                O(1)
Access Top        O(1)                O(1)
TOTAL             O(1)                O(1)

---------------------------------------------------------
‚úÖ SUMMARY:
- peek() is an efficient O(1) operation.
- Used to inspect the top without removing it.
- Does not alter the stack structure.
"""
