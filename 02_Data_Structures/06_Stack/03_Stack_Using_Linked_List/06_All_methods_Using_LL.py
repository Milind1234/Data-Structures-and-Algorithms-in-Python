# note.py
# ------------------------------------------------------
# üìò STACK (Linked List Implementation)
# ‚úÖ All Core Methods: push(), pop(), peek(), is_empty(), size(), clear(), __str__()
# ------------------------------------------------------

"""
üìå INTRODUCTION

In this implementation, a **stack** is built using a **Linked List**.

Each node has:
    - value  ‚Üí data to store
    - next   ‚Üí pointer to the next node

The stack maintains:
    - top    ‚Üí pointer to the most recently added node
    - length ‚Üí number of elements in stack

---------------------------------------------------------
üîπ Why use Linked List for Stack?
---------------------------------------------------------
‚úÖ No fixed size (dynamic memory allocation)
‚úÖ O(1) time for insertion (push) and deletion (pop)
‚úÖ Easy to implement top-based operations

Visualization:

Top ‚Üí [ 30 ] ‚Üí [ 20 ] ‚Üí [ 10 ] ‚Üí None
         ‚Üë
      Last inserted element
"""

# ---------------------------------------------------------------
# üß© NODE CLASS
# ---------------------------------------------------------------
class Node:
    """Node represents a single element of the stack."""
    def __init__(self, value):
        self.value = value
        self.next = None


# ---------------------------------------------------------------
# üß± STACK CLASS
# ---------------------------------------------------------------
class Stack:
    """
    A Stack data structure implemented using Linked List.

    Attributes:
        top     ‚Üí reference to the top node
        length  ‚Üí number of elements in stack
    """
    def __init__(self):
        """
        Initialize an empty stack.

        ‚è±Ô∏è Time Complexity: O(1)
        üíæ Space Complexity: O(1)
        """
        self.top = None
        self.length = 0

    # -----------------------------------------------------------
    # 1Ô∏è‚É£ PUSH METHOD
    # -----------------------------------------------------------
    def push(self, value):
        """
        üß† PURPOSE:
        Insert (push) a new node at the top of the stack.

        STEPS:
        1Ô∏è‚É£ Create a new node with given value.
        2Ô∏è‚É£ Point new_node.next to current top.
        3Ô∏è‚É£ Move top pointer to new_node.
        4Ô∏è‚É£ Increment stack length.

        VISUALIZATION:
            Before push(30):
                Top ‚Üí [20] ‚Üí [10] ‚Üí None
            After push(30):
                Top ‚Üí [30] ‚Üí [20] ‚Üí [10] ‚Üí None

        ‚è±Ô∏è Time Complexity: O(1)
        üíæ Space Complexity: O(1)
        """
        new_node = Node(value)
        new_node.next = self.top
        self.top = new_node
        self.length += 1

    # -----------------------------------------------------------
    # 2Ô∏è‚É£ POP METHOD
    # -----------------------------------------------------------
    def pop(self):
        """
        üß† PURPOSE:
        Remove and return the top element from the stack.

        STEPS:
        1Ô∏è‚É£ Check if stack is empty ‚Üí return message.
        2Ô∏è‚É£ Store current top node in popped_node.
        3Ô∏è‚É£ Move top pointer to next node.
        4Ô∏è‚É£ Detach popped node.
        5Ô∏è‚É£ Decrease length by 1.
        6Ô∏è‚É£ Return popped node value.

        VISUALIZATION:
            Before pop():
                Top ‚Üí [30] ‚Üí [20] ‚Üí [10]
            After pop():
                Top ‚Üí [20] ‚Üí [10]
                Returned ‚Üí 30

        ‚è±Ô∏è Time Complexity: O(1)
        üíæ Space Complexity: O(1)
        """
        if self.length == 0:
            return "Stack is Empty"

        popped_node = self.top
        self.top = self.top.next
        popped_node.next = None
        self.length -= 1
        return popped_node.value

    # -----------------------------------------------------------
    # 3Ô∏è‚É£ PEEK METHOD
    # -----------------------------------------------------------
    def peek(self):
        """
        üß† PURPOSE:
        Return the top element without removing it.

        STEPS:
        1Ô∏è‚É£ If stack is empty ‚Üí return message.
        2Ô∏è‚É£ Else return top.value.

        VISUALIZATION:
            Stack ‚Üí [30] ‚Üí [20] ‚Üí [10]
            peek() ‚Üí returns 30 (stack unchanged)

        ‚è±Ô∏è Time Complexity: O(1)
        üíæ Space Complexity: O(1)
        """
        if self.top is None:
            return "Stack is Empty"
        return self.top.value

    # -----------------------------------------------------------
    # 4Ô∏è‚É£ IS_EMPTY METHOD
    # -----------------------------------------------------------
    def is_empty(self):
        """
        üß† PURPOSE:
        Check whether the stack is empty or not.

        RETURNS:
        ‚úÖ True  ‚Üí if stack has no elements.
        üö´ False ‚Üí otherwise.

        VISUALIZATION:
            []
            is_empty() ‚Üí True
            After push(5)
            is_empty() ‚Üí False

        ‚è±Ô∏è Time Complexity: O(1)
        üíæ Space Complexity: O(1)
        """
        return self.length == 0

    # -----------------------------------------------------------
    # 5Ô∏è‚É£ SIZE METHOD
    # -----------------------------------------------------------
    def size(self):
        """
        üß† PURPOSE:
        Return the total number of elements in the stack.

        EXAMPLE:
            push(10), push(20), push(30)
            size() ‚Üí 3

        ‚è±Ô∏è Time Complexity: O(1)
        üíæ Space Complexity: O(1)
        """
        return self.length

    # -----------------------------------------------------------
    # 6Ô∏è‚É£ CLEAR METHOD
    # -----------------------------------------------------------
    def clear(self):
        """
        üß† PURPOSE:
        Remove all elements from the stack.

        STEPS:
        1Ô∏è‚É£ Set top = None.
        2Ô∏è‚É£ Reset length = 0.

        VISUALIZATION:
            Before clear():
                Top ‚Üí [30] ‚Üí [20] ‚Üí [10]
            After clear():
                Top ‚Üí None (Empty Stack)

        ‚è±Ô∏è Time Complexity: O(1)
        üíæ Space Complexity: O(1)
        """
        self.top = None
        self.length = 0

    # -----------------------------------------------------------
    # 7Ô∏è‚É£ __STR__ METHOD (VISUALIZATION)
    # -----------------------------------------------------------
    def __str__(self):
        """
        üß† PURPOSE:
        Print the stack elements from top to bottom (vertically).

        EXAMPLE OUTPUT:
            30
            20
            10

        ‚è±Ô∏è Time Complexity: O(n)
        üíæ Space Complexity: O(n)
        """
        if self.length == 0:
            return "Stack is Empty"

        values = []
        current_node = self.top
        while current_node:
            values.append(str(current_node.value))
            current_node = current_node.next
        return "\n".join(values)


# ---------------------------------------------------------------
# ‚úÖ USAGE EXAMPLE & DRY RUN
# ---------------------------------------------------------------
if __name__ == "__main__":
    print("‚úÖ STACK (Linked List Implementation) ‚Äî Demo\n")

    stack = Stack()

    print("Is Empty?", stack.is_empty())  # True

    # Push elements
    stack.push(10)
    stack.push(20)
    stack.push(30)

    print("\nAfter Push Operations:")
    print(stack)  # Top: 30 ‚Üí 20 ‚Üí 10

    # Peek top
    print("\nTop Element (peek):", stack.peek())  # 30

    # Size of stack
    print("Size of Stack:", stack.size())  # 3

    # Pop element
    print("\nPopped Element:", stack.pop())  # 30
    print("After Pop:")
    print(stack)  # Top ‚Üí 20 ‚Üí 10

    # Clear stack
    stack.clear()
    print("\nAfter Clear:")
    print("Is Empty?", stack.is_empty())  # True
    print(stack)  # Stack is Empty


# ---------------------------------------------------------------
# üìä SUMMARY OF TIME & SPACE COMPLEXITIES
# ---------------------------------------------------------------
"""
Operation        | Time Complexity | Space Complexity
-----------------------------------------------------
push()           | O(1)            | O(1)
pop()            | O(1)            | O(1)
peek()           | O(1)            | O(1)
is_empty()       | O(1)            | O(1)
size()           | O(1)            | O(1)
clear()          | O(1)            | O(1)
__str__()        | O(n)            | O(n)

‚úÖ Stack operations (push, pop, peek) all run in constant time.
‚úÖ Only visualization (__str__) is linear due to traversal.
"""
